% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/example_dct_spec.R, R/extract_dct_specs.R
\docType{data}
\name{example_dct_spec}
\alias{example_dct_spec}
\alias{extract_dct_specs}
\title{Extract DCT specifications from YAML fragments}
\format{An object of class \code{character} of length 1.}
\usage{
example_dct_spec

extract_dct_specs(file, text, delimiterRegEx = "^---$",
  dctContainer = "dct", ignoreOddDelimiters = FALSE, silent = FALSE)
}
\arguments{
\item{file}{The file containing the YAML fragments.}

\item{text}{A character vector containing the YAML fragments, where
every element should represent one line in the file.}

\item{delimiterRegEx}{The regular expression used to locate YAML
fragments}

\item{dctContainer}{The container of the DCT specifications in the YAML
fragments. Because only DCT specifications are read that are stored in
this container, the files can contain YAML fragments with other data, too,
without interfering with the parsing of the DCT specifications.}

\item{ignoreOddDelimiters}{Whether to throw an error (FALSE) or
delete the last delimiter (TRUE) if an odd number of delimiters is
encountered.}

\item{silent}{Whether to be silent (TRUE) or informative (FALSE).}
}
\value{
A list of DCT specifications in an object of class \code{dtcRawSpecList}.
}
\description{
This function takes a file containing YAML fragments and extracts
the DCT specifications from them.
}
\details{
This function is called by \code{\link[=extract_dct_dir]{extract_dct_dir()}}; it is normally not
necessary to call this function directly.
}
\examples{
extract_dct_specs(text=unlist(strsplit(dct::example_dct_spec, '\\n')));

}
\keyword{datasets}
